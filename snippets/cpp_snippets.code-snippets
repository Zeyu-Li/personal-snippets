{
    "printf": {
        "prefix": "!p",
        "body": [
            "printf(\"%${1:Input Type}\\n\", ${2:Input});",
            ""
        ],
        "description": "Prints with printf"
    },
    "cout": {
        "prefix": "!c",
        "body": [
            "cout << ${1} << '\\n';",
            ""
        ],
        "description": "Prints with cout"
    },
    "std::cout": {
        "prefix": "!sc",
        "body": [
            "std::cout << ${1} << std::endl;",
            ""
        ],
        "description": "Prints with std::cout"
    },
    "boilerplate": {
        "prefix": "!main",
        "body": [
            "/* ",
            "* ${1:Project} by ${2:Andrew Li}",
            "* Description: ${3:Project description}",
            "*/ ",
            "#include <iostream>",
            "",
            "${4:using namespace std;}",
            "",
            "int main() {",
            "    ${5}",
            "    return 0;",
            "}",
            ""
        ],
        "description": "Boilerplate"
    },
    "competitive": {
        "prefix": "!mc",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "typedef long long ll;",
            "using namespace std;",
            "",
            "int main() {",
            "    ${1}",
            "    return 0;",
            "}",
            ""
        ],
        "description": "competitive boilerplate"
    },
    "competitive-plus": {
        "prefix": "!mcp",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "typedef long long ll;",
            "typedef vector<int> vi;",
            "typedef pair<int, int> pi;",
            "#define F first",
            "#define S second",
            "#define PB push_back",
            "using namespace std;",
            "",
            "int main() {",
            "    ios::sync_with_stdio(0);",
            "    cin.tie(0);",
            "",
            "    ${1}",
            "    return 0;",
            "}",
            ""
        ],
        "description": "super competitive boilerplate"
    },
    "fast IO": {
        "prefix": "!fast",
        "body": [
            "ios::sync_with_stdio(0);",
            "cin.tie(0);"
        ],
        "description": "Boilerplate"
    },
    // unusable C++ snippets extension replacement ðŸ˜ 
    "for": {
        "prefix": "for",
        "body": [
            "for (int i = ${1:length}; i < ${2:0}; i++) {",
            "    ${3:/* code */}",
            "}"
        ],
        "description": "for loop"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while (${1:/* condition */}) {",
            "    ${2:/* code */}",
            "}"
        ],
        "description": "while loop"
    },
    "do": {
        "prefix": "do",
        "body": [
            "do {",
            "    ${1:/* code */}",
            "} while (${2:/* condition */});"
        ],
        "description": "do loop"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${1:expression}) {",
            "    case ${2:/* constant-expression */}:",
            "        ${3:/* code */}",
            "        break;",
            "    default:",
            "        break;",
            "}",
            ""
        ],
        "description": "switch"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if (${1:/* condition */}) {",
            "    ${2:/* code */}",
            "}"
        ],
        "description": "if"
    },
    "elif": {
        "prefix": "elif",
        "body": [
            "else if (${1:/* condition */}) {",
            "    ${2:/* code */}",
            "}"
        ],
        "description": "elif"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else {",
            "    ${1:/* code */}",
            "}"
        ],
        "description": "else"
    },
    "vector": {
        "prefix": "vi",
        "body": [
            "vector<${1:int}> ${2:array};",
            ""
        ],
        "description": "vector"
    },

}